
name: Continuous Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  PROJECT_ID: aerostaraviation
  REGION: us-east1
  SERVICE_NAME: aerostar-aviation-app
  REPOSITORY_NAME: aerostar-aviation
  IMAGE_NAME: aerostartaviation
  REGISTRY: us-east1-docker.pkg.dev

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

  deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Google Cloud SDK
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install google-cloud-cli

      - name: Create service account key from base64
        run: |
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}" | base64 -d > ${{ runner.temp }}/gcp-key.json
          echo "‚úÖ Service account key file created"

      - name: Verify key file
        run: |
          if [ -f "${{ runner.temp }}/gcp-key.json" ]; then
            echo "‚úÖ Key file exists"
            echo "File size: $(wc -c < ${{ runner.temp }}/gcp-key.json) bytes"
            if jq empty ${{ runner.temp }}/gcp-key.json 2>/dev/null; then
              echo "‚úÖ Valid JSON format"
              echo "Project ID from key: $(jq -r '.project_id' ${{ runner.temp }}/gcp-key.json)"
              echo "Service account email: $(jq -r '.client_email' ${{ runner.temp }}/gcp-key.json)"
            else
              echo "‚ùå Invalid JSON format"
              exit 1
            fi
          else
            echo "‚ùå Key file not found"
            exit 1
          fi

      - name: Authenticate with Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=${{ runner.temp }}/gcp-key.json
          gcloud config set project ${{ env.PROJECT_ID }}

      - name: Verify authentication
        run: |
          echo "‚úÖ Authentication successful"
          gcloud auth list
          echo "Current project: $(gcloud config get-value project)"

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars="NODE_ENV=production"

      - name: Get Cloud Run URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "üöÄ Application deployed successfully!"
          echo "üì± Service URL: $SERVICE_URL"

      - name: Cleanup
        if: always()
        run: |
          rm -f ${{ runner.temp }}/gcp-key.json
